{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","totalContributions","setTotalContributions","purchasePrice","setPurchasePrice","offeringFMV","setOfferingFMV","currentPrice","setCurrentPrice","fmv","setFMV","numShares","setShares","refund","setRefund","useEffect","Math","min","trunc","toFixed","Container","Row","Col","Form","Group","as","controlId","Label","column","sm","Control","defaultValue","onChange","evt","currentTarget","value","plaintext","readOnly","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c21360fc.chunk.js","sourcesContent":["// @flow\nimport React, { useState, useEffect } from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Form from 'react-bootstrap/Form';\n\nimport './App.css';\n\nconst IRS_MAXIMUM = 25000;\nconst MAXIMUM_SHARES_UBER_ALLOWS = 1500;\n\nfunction App() {\n  const [totalContributions, setTotalContributions] = useState(1000);\n  const [purchasePrice, setPurchasePrice] = useState(40);\n  const [offeringFMV, setOfferingFMV] = useState(45);\n  const [currentPrice, setCurrentPrice] = useState(39);\n  const [fmv, setFMV] = useState(30);\n  const [numShares, setShares] = useState(0);\n  const [refund, setRefund] = useState(0.0);\n\n  useEffect(\n    function updateShares() {\n      setShares(\n        Math.min(\n          Math.trunc(totalContributions / purchasePrice),\n          Math.trunc(IRS_MAXIMUM / fmv),\n          MAXIMUM_SHARES_UBER_ALLOWS\n        )\n      );\n    },\n    [fmv, purchasePrice, refund, totalContributions]\n  );\n\n  useEffect(\n    function updateRefund() {\n      setRefund((totalContributions - numShares * purchasePrice).toFixed(2));\n    },\n    [numShares, purchasePrice, totalContributions]\n  );\n\n  useEffect(\n    function purchasePrice() {\n      setPurchasePrice(0.85 * Math.min(offeringFMV, fmv, currentPrice));\n    },\n    [currentPrice, fmv, offeringFMV]\n  );\n\n  return (\n    <Container>\n      <br />\n      <Row>\n        <Col>\n          <Form>\n            <Form.Group as={Row} controlId=\"formTotalContributions\">\n              <Form.Label column sm=\"2\">\n                Total Contributions\n              </Form.Label>\n              <Col sm=\"10\">\n                <Form.Control\n                  defaultValue={totalContributions}\n                  onChange={evt => {\n                    setTotalContributions(evt.currentTarget.value);\n                  }}\n                />\n              </Col>\n            </Form.Group>\n            <Form.Group as={Row} controlId=\"formPlaintextIRS\">\n              <Form.Label column sm=\"2\">\n                Remaining IRS Limit (Including carryover)\n              </Form.Label>\n              <Col sm=\"10\">\n                <Form.Control plaintext readOnly={true} value={IRS_MAXIMUM} />\n              </Col>\n            </Form.Group>\n            <br />\n            <Form.Group as={Row} controlId=\"offeringDateFMV\">\n              <Form.Label column sm=\"2\">\n                Offering date FMV\n              </Form.Label>\n              <Col sm=\"10\">\n                <Form.Control\n                  defaultValue={offeringFMV}\n                  onChange={evt => {\n                    setOfferingFMV(evt.currentTarget.value);\n                  }}\n                />\n              </Col>\n            </Form.Group>\n            <Form.Group as={Row} controlId=\"formPlaintextReset\">\n              <Form.Label column sm=\"2\">\n                FMV on close of day after last purchase date (reset)\n              </Form.Label>\n              <Col sm=\"10\">\n                <Form.Control\n                  defaultValue={fmv}\n                  onChange={evt => {\n                    setFMV(evt.currentTarget.value);\n                  }}\n                />\n              </Col>\n            </Form.Group>\n            <Form.Group as={Row} controlId=\"formCurrentPrice\">\n              <Form.Label column sm=\"2\">\n                Current Price\n              </Form.Label>\n              <Col sm=\"10\">\n                <Form.Control\n                  defaultValue={currentPrice}\n                  onChange={evt => {\n                    setCurrentPrice(evt.currentTarget.value);\n                  }}\n                />\n              </Col>\n            </Form.Group>\n            <Form.Group as={Row} controlId=\"formPurchasePrice\">\n              <Form.Label column sm=\"2\">\n                Purchase Price\n              </Form.Label>\n              <Col sm=\"10\">\n                <Form.Control plaintext readOnly value={purchasePrice.toFixed(2)} />\n              </Col>\n            </Form.Group>\n            <br />\n            <Form.Group as={Row} controlId=\"sharesToBePurchased\">\n              <Form.Label column sm=\"2\">\n                Shares To Be Purchased\n              </Form.Label>\n              <Col sm=\"10\">\n                <Form.Control plaintext readOnly value={numShares} />\n              </Col>\n            </Form.Group>\n            <Form.Group as={Row} controlId=\"formRefundAmount\">\n              <Form.Label column sm=\"2\">\n                Refund Amount\n              </Form.Label>\n              <Col sm=\"10\">\n                <Form.Control plaintext readOnly value={refund} />\n              </Col>\n            </Form.Group>\n            <br />\n          </Form>\n        </Col>\n      </Row>\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}